% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/databricks_execute.R
\name{databricks_execute}
\alias{databricks_execute}
\title{Remote execution of commands on a Databricks cluster.}
\usage{
databricks_execute(command, context, verbose = F, ...)
}
\arguments{
\item{command}{A string containing commands for remote execution on Databricks.}

\item{context}{The list generated by \code{create_execution_context}}

\item{verbose}{If TRUE, will print the API response to the console.  Defaults to
FALSE.}

\item{...}{Additional options to be passed to \code{data.table::fread} which is used to
parse the API response.}
}
\value{
A list with two components:
\itemize{
    \item \emph{response} - The full API response.
    \item \emph{data} - The data as a data.frame.
}
}
\description{
This function sends commands to an execution context on an existing
Databricks cluster via REST API.  It requires a context_id from
\code{create_execution_context}.  Commands must be compatible with the
language of the execution context - 'r', 'python', 'scala', or 'sql'.
Will attempt to return a data.frame but if the execution hasn't finished will return
the status of execution.  If your command does not return a data.frame output may
vary considerably, or fail.
}
\details{
The API endpoint for creating the execution context is is '1.2/commands/execute'.
  For all details on API calls please see the official documentation at
\url{https://docs.databricks.com/dev-tools/api/latest/}.
}
\examples{
# Using netrc
context <- create_execution_context(workspace = "https://eastus2.azuredatabricks.net",
                  language = "r",
                  cluster_id = "1017-337483-jars232")

## Use the context to execute a command on Databricks
command <- "iris[1, ]"
result <- databricks_execute(command, context)

## Access dataframe
result$data

}
